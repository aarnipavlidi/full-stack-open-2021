{"version":3,"sources":["reducers/notificationReducer.js","services/anecdotes.js","reducers/anecdoteReducer.js","components/AnecdoteForm.js","components/AnecdoteList.js","components/Notification.js","reducers/filterReducer.js","components/Filter.js","App.js","store.js","index.js"],"names":["timeout","url","getValuesFromDatabase","a","axios","get","response","data","createNewValueDatabase","getContent","valueStructure","content","votes","post","updateValueDatabase","getCurrentValue","updateVotes","put","id","reducer","state","action","console","log","type","getCurrentID","getMatchingID","find","results","updateValue","map","showNotificationMessage","notificationMessage","notificationDuration","dispatch","clearTimeout","notification","setTimeout","notificationReducer","mapDispatchToProps","createNewValue","getValueContent","anecdotesService","ConnectedAnecdoteForm","connect","values","message","props","addValue","event","preventDefault","target","newText","value","onSubmit","name","AnecdoteList","anecdotes","useSelector","useDispatch","voteButton","likeValueButton","getFilterValueFromStore","filter","filterValue","toLowerCase","includes","sort","b","onClick","ConnectedNotification","style","border","padding","borderWidth","filterReducer","changeFilterValue","getCurrentFilterValue","ConnectedFilter","marginBottom","onChange","App","useEffect","combineReducers","anecdoteReducer","store","createStore","composeWithDevTools","applyMiddleware","thunk","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.199e9e9d.chunk.js","sourcesContent":["// This exercise has been commented by Aarni Pavlidi, if you have any questions or suggestions with the code,\n// then please contact me by sending email at me@aarnipavlidi.fi <3\n\n// Alustetaan muuttuja \"notificationReducer\", joka suorittaa {...} sisällä olevat asiat. Muuttuja saa myös käyttöönsä parametrien => \"state\" ja \"action\" arvot.\nconst notificationReducer = (state = null, action) => {\n\n  // Jos alla oleva if-ehto toteutuu, niin sovellus suorittaa {...} sisällä olevat asiat eli,\n  // aina kun käyttäjä äänestää tiettyä arvoa tai lisää uuden arvon tietokantaan, niin alla\n  // oleva funktio palauttaa storeen => \"action.notification\":n datan => \"message\" objektille.\n  if (action.type === 'SHOW_NOTIFICATION') {\n    return action.notification\n  }\n\n  // Jos alla oleva if-ehto totetuu, niin sovellus suorittaa {...} sisällä olevat asiat eli,\n  // aina kun käyttäjä joko lisää uuden arvon tai äänestää tiettyä arvoa, niin tämä kyseinen\n  // funktio suoritetaan (setTimeout(...) kautta) eli juuri renderöity \"notifikaatio viesti\"\n  // piilotetaan käyttäjältä. Tämä johtuu siitä, koska \"notification\" on yhtä kuin \"null\".\n  if (action.type === 'HIDE_NOTIFICATION') {\n    return action.notification\n  }\n\n  return state\n}\n\nlet timeout // Alustetaan muuttuja \"timeout\" väliaikaisesti alla olevaa funktiota varten.\n\n// Viedään muuttujan \"showNotificationMessage\" sisältö käytettäväksi, jotta esim. \"index.js\"\n// tiedosto pystyy hyödyntämään sovelluksen aikana. Aina kun kyseiseen funktioon\n// tehdään viittaus, niin sovellus tekee {...} sisällä olevat asiat. Ota myös huomioon,\n// että funktio saa käyttöönsä kaksi (2) erilaista paremetrin arvoa eli => \"notificationMessage\"\n// josta löytyy sen hetkinen viesti mikä halutaan renderöidä käyttäjälle näkyviin sekä\n// => \"notificationDuration\", jonka avulla määritellään \"setTimeout(...)\" funktiota\n// varten ajastin, että kuinka kauan \"notifikaatio\" on näkyvissä käyttäjälle.\nexport const showNotificationMessage = (notificationMessage, notificationDuration) => {\n  // Tehtävää \"6.21 anekdootit, loppuhuipennus\" varten olemme muokanneet koodia niin,\n  // että aina kun käyttäjä äänestää tiettyä tekstiä, niin sen hetkinen ajastin eli\n  // \"setTimeout(...)\" funktio \"resetoidaan\". Tämän avulla varmistetaan sen, että\n  // aina viimeisin (uusin) notifikaatio kestää alkuperäisen keston ajan. Funktio\n  // on alustettu muuttujalle => timeout ja kyseinen muuttuja on alustettu\n  // väliaikaisena muuttujana (let) funktion ulkopuolelle. Lisää tietoa funktiosta\n  // löytyy täältä: https://www.w3schools.com/jsref/met_win_cleartimeout.asp\n  return async dispatch => {\n    clearTimeout(timeout)\n    dispatch({\n      type: 'SHOW_NOTIFICATION',\n      notification: notificationMessage\n    })\n    timeout = setTimeout(() => {\n      dispatch({\n        type: 'HIDE_NOTIFICATION',\n        notification: null\n      })\n    }, notificationDuration * 500)\n  }\n}\n\n// Viedään muuttujan \"notificationReducer\" avulla tämän tiedoston sisältö käytettäväksi, jotta esim. \"index.js\" tiedosto pystyy hyödyntämään sovelluksen aikana.\nexport default notificationReducer\n","// This exercise has been commented by Aarni Pavlidi, if you have any questions or suggestions with the code,\n// then please contact me by sending email at me@aarnipavlidi.fi <3\n\nimport axios from 'axios' // Sovellus ottaa \"axios\" nimisen kirjaston käyttöönsä.\nconst url = 'http://localhost:8000/api/anecdotes' // Alustetaan muuttuja \"url\", joka on yhtä kuin kyseisen tekstin arvo.\n\n// Alustetaan muuttuja \"getValuesFromDatabase\", joka suorittaa {...} sisällä olevat asiat. Kun alla\n// oleva funktio on suoritettu, niin palautetaan data takaisin käyttäjälle näkyviin\n// \"response.data\" muuttujan avulla. Funktiota hyödynnetään => \"App.js\" tiedostossa.\nconst getValuesFromDatabase = async () => {\n  const response = await axios.get(url) // Alustetaan muuttuja \"response\", joka suorittaa kyseisen funktion kunnes siirtyy seuraavaan kohtaan sovelluksessa.\n  return response.data // Funktio palauttaa takaisin käyttäjälle => \"response.data\" muuttujan arvon.\n}\n\n// Alustetaan muuttuja \"createNewValueDatabase\", joka suorittaa {...} sisällä olevat asiat. Kun\n// alla oleva funktio on suoritettu, niin palautetaan data takaisin käyttäjälle näkyviin\n// \"response.data\" muuttujan avulla. Funktiota hyödynnetään => \"AnecdoteForm.js\" tiedostossa.\n// Funktio saa myös käyttöönsä \"getContent\" parametrin arvon, eli aina kun käyttäjä lisää\n// uuden arvon tietokantaan, niin sen hetkinen arvo tallentuu kyseisen parametrin alle.\nconst createNewValueDatabase = async (getContent) => {\n  const valueStructure = { // Alustetaan muuttuja \"valueStructure\", joka saa {...} sisällä olevat objektit käyttöönsä.\n    content: getContent, // eli \"valueStructure.content\" on yhtä kuin => \"getContent\" muuttujan arvo.\n    votes: 0 // eli \"valueStructure.votes\" on yhtä kuin => \"0\" arvo.\n  }\n  const response = await axios.post(url, valueStructure) // Alustetaan muuttuja \"response\", joka suorittaa kyseisen funktion kunnes siirtyy seuraavaan kohtaan sovelluksessa.\n  return response.data // Funktio palauttaa takaisin käyttäjälle => \"response.data\" muuttujan arvon.\n}\n\n// Alustetaan muuttuja \"updateValueDatabase\", joka suorittaa {...} sisällä olevat asiat. Kun\n// alla oleva funktio on suoritettu, niin palautetaan data takaisin käyttäjälle näkyviin\n// \"response.data\" muuttujan avulla. Funktiota hyödynnetään => \"AnecdoteList.js\" tiedostossa.\n// Funktio saa myös käyttöönsä \"getCurrentValue\" parametrin arvon, eli aina kun käyttäjä\n// haluaa antaa uuden äänen (vote) tietylle tekstille, niin kyseisen tekstin arvot eli =>\n// \"content\", \"votes\" sekä \"id\" siirtyvät kyseisen parametrin alle.\nconst updateValueDatabase = async (getCurrentValue) => {\n  const updateVotes = {\n    content: getCurrentValue.content,\n    votes: getCurrentValue.votes + 1\n  }\n  const response = await axios.put(`${url}/${getCurrentValue.id}`, updateVotes) // Alustetaan muuttuja \"response\", joka suorittaa kyseisen funktion kunnes siirtyy seuraavaan kohtaan sovelluksessa.\n  return response.data // Funktio palauttaa takaisin käyttäjälle => \"response.data\" muuttujan arvon.\n}\n\n// Viedään (export) alla olevat muuttujat sovelluksen käytettäväksi, jotta esim. \"App.js\" tiedosto pystyy suorittamaan kyseiset funktiot.\nexport default { getValuesFromDatabase, createNewValueDatabase, updateValueDatabase }\n","// This exercise has been commented by Aarni Pavlidi, if you have any questions or suggestions with the code,\n// then please contact me by sending email at me@aarnipavlidi.fi <3\n\nimport anecdotesService from '../services/anecdotes' // Alustetaan muuttuja \"anecdotesService\", joka hyödyntää \"anecdotes.js\" (erillinen moduuli) tiedostoa eli => \"./services/anecdotes.js\".\n\n// Alustetaan muuttuja \"reducer\", joka suorittaa {...} sisällä olevat asiat. Muuttuja saa myös käyttöönsä parametrien => \"state\" ja \"action\" arvot.\nconst reducer = (state = [], action) => {\n  // Kun käyttäjä painaa jotain painiketta, niin alla oleva teksti tulostuu\n  // konsoliin näkyviin, jonka perään tulee vielä muuttujan objektin arvo.\n  console.log('User has given new like to the following id:', action.data)\n\n  // Jos alla oleva if-ehto toteutuu, niin sovellus suorittaa {...} sisällä olevat asiat.\n  // Kun käyttäjä saapuu sovellukseen, niin kyseiseen funktioon eli \"showValuesFromDatabase\",\n  // joka palauttaa takaisin => \"type: SHOW_ALL_VALUES\" sekä => \"data: values\".\n  if (action.type === 'SHOW_ALL_VALUES') {\n    return action.data\n  }\n\n  // Jos alla oleva if-ehto toteutuu, niin sovellus suorittaa {...} sisällä olevat asiat.\n  if (action.type === 'ADD_NEW_LIKE') {\n    const getCurrentID = action.data.id // Alustetaan muuttuja \"getCurrentID\", joka on yhtä kuin \"action.data.id\" muuttujan arvo.\n\n    // Alustetaan muuttuja \"getMatchingID\", joka suorittaa alla olevan funktion. Tarkoituksena\n    // on siis etsiä \"state\" muuttujasta (taulukosta) \"id\" objektin arvo, joka on yhtä kuin\n    // \"getCurrentID\" muuttujan kanssa. Funktio palauttaa taulukon, jonka sisältä löytyy\n    // kolme (3) objektia eli => [content: xxx, id: xxx, votes: xxx].\n    const getMatchingID = state.find(results => results.id === getCurrentID)\n\n    // Alustetaan muuttuja \"updateValue\", joka suorittaa {...} sisällä olevat asiat. Luodaan\n    // kopio sen hetkisestä \"getMatchingID\" muuttujan arvosta ja lisätään objektiin \"votes\"\n    // => sen hetkisen objektin arvo eli => \"getMatchingID.votes\" sekä lisätään + 1.\n    const updateValue = {\n      ...getMatchingID,\n      votes: getMatchingID.votes + 1\n    }\n\n    // Sovellus renderöi alla olevan funktion tuloksen takaisin käyttäjälle, eli luodaan uusi\n    // taulukko \"map()\" funktion avulla. Jos \"results.id on epätosi muuttujan \"getCurrentID\"\n    // kanssa (eli sen hetkisen klikatun painikkeen kanssa), niin uuteen taulukkoon tulee\n    // alkuperäisen muuttujan arvot. Muussa tapauksessa renderöidään \"updateValue\" arvot.\n    return state.map(results =>\n      results.id !== getCurrentID ? results : updateValue)\n  }\n\n  // Jos alla oleva if-ehto toteutuu, niin sovellus suorittaa {...} sisällä olevat asiat.\n  // renderöidään takaisin, siis hetkisen \"state\" muuttujan taulukko => luomalla kopio\n  // siitä, jonka perään tulee käyttäjän lisämää uusi arvo näkyviin sivulle.\n  if (action.type === 'ADD_NEW_CONTENT') {\n    return [...state, action.data]\n  }\n\n  return state\n}\n\n// Viedään muuttujan \"showValuesFromDatabase\" sisältö käytettäväksi, jotta esim. \"index.js\"\n// tiedosto pystyy hyödyntämään sovelluksen aikana. Aina kun kyseiseen funktioon\n// tehdään viittaus, niin sovellus tekee {...} sisällä olevat asiat. Alustetaan myös\n// muuttuja \"response\", joka suorittaa  sen rivillä olevan funktion (await...), jonka\n// jälkeen suoritetaan vasta => \"dispatch(...)\" funktio.\nexport const showValuesFromDatabase = () => {\n  return async dispatch => {\n    const response = await anecdotesService.getValuesFromDatabase()\n    dispatch({\n      type: 'SHOW_ALL_VALUES',\n      data: response\n    })\n  }\n}\n\n// Viedään muuttujan \"likeValueButton\" sisältö käytettäväksi, jotta esim. \"index.js\"\n// tiedosto pystyy hyödyntämään sovelluksen aikana. Aina kun kyseiseen funktioon\n// tehdään viittaus, niin sovellus tekee {...} sisällä olevat asiat. Alustetaan myös\n// muuttuja \"response\", joka suorittaa sen rivillä olevan funktion (await...), jonka\n// jälkeen suoritetaan vasta => \"dispatch(...)\" funktio. Ota myös huomoon, että\n// muuttujasta eli \"getCurrentValue\" löytyy kolme (3) erilaista objektia =>\n// \"content\", \"votes\" sekä \"id\" objektien arvot. Näitä hyödynnetään, kun sovellus\n// suorittaa \"updateValueDatabase(...)\" funktiota => \"anecdotes.js\" tiedostossa.\nexport const likeValueButton = (getCurrentValue) => {\n  return async dispatch => {\n    const response = await anecdotesService.updateValueDatabase(getCurrentValue)\n    dispatch({\n      type: 'ADD_NEW_LIKE',\n      data: response\n    })\n  }\n}\n\n// Viedään muuttujan \"createNewValue\" sisältö käytettäväksi, jotta esim. \"index.js\"\n// tiedosto pystyy hyödyntämään sovelluksen aikana. Aina kun kyseiseen funktioon\n// tehdään viittaus, niin sovellus tekee {...} sisällä olevat asiat. Ota huomioon,\n// että kyseisen parametrin sisältä löytyy kaksi (2) objektia eli => \"content\" ja\n// \"votes\". Aikaisemmissa tehtävissä käytimme manuaalista id:n arvo generointia,\n// mutta koska olemme ottaneet käyttöön backendin, niin se generoi id:n puolestamme.\nexport const createNewValue = (getValueContent) => {\n  return async dispatch => {\n    const response = await anecdotesService.createNewValueDatabase(getValueContent)\n    dispatch({\n      type: 'ADD_NEW_CONTENT',\n      data: response\n    })\n  }\n}\n\n// Viedään muuttujan \"reducer\" avulla tämän tiedoston sisältö käytettäväksi, jotta esim. \"index.js\" tiedosto pystyy hyödyntämään sovelluksen aikana.\nexport default reducer\n","// This exercise has been commented by Aarni Pavlidi, if you have any questions or suggestions with the code,\n// then please contact me by sending email at me@aarnipavlidi.fi <3\n\nimport React from 'react' // Komponentti ottaa \"react\" nimisen kirjaston käyttöönsä.\nimport { connect } from 'react-redux' // Komponentti ottaa \"connect\" funktion käyttöönsä => \"react-redux\" kirjaston kautta.\n\nimport { createNewValue } from '../reducers/anecdoteReducer' // Komponentti ottaa \"createNewValue\" funktion käyttöönsä, joka sijaitsee => \"anecdoteReducer.js\" tiedostossa.\nimport { showNotificationMessage } from '../reducers/notificationReducer' // Komponentti ottaa \"showNotificationMessage\" funktion käyttöönsä, joka sijaitsee => \"anecdoteReducer.js\" tiedostossa.\n\nconst AnecdoteForm = (props) => { // Alustetaan \"AnecdoteForm\" niminen komponentti, joka suorittaa {...} sisällä olevat asiat.\n  // Alustetaan muuttuja \"addValue\", joka suorittaa {...} sisällä olevat asiat,\n  // aina kun kyseiseen funktioon tehdään viittaus eli aina kun, käyttäjä klikkaa\n  // painiketta, niin suoritetaan kyseinen funktio ja lopuksi viedään tiedot\n  // eteenpäin => \"createNewValue(...)\" funktiota varten, jotta uusi arvo näkyy sivulla.\n  // Muuttuja \"addValue\" myös suorittaa funktion => \"showNotificationMessage(...)\",\n  // joka saa käyttöönsä kaksi (2) erilaista parametrin arvoa sovelluksen käytettäväksi.\n  const addValue = async (event) => {\n    event.preventDefault() // The event.preventDefault() method stops the default action of an element from happening.\n    // Ota myös huomioon, että alla olevan input:in => \"name\" arvo on yhtä kuin \"newText\", jos sitä ei olisi tai on väärä, niin tulee erroria! :)\n    const getContent = event.target.newText.value // Alustetaan muuttuja \"getContent\", joka saa sen hetkisen arvon, minkä käyttäjä laittaa => input:in arvoksi.\n    event.target.newText.value = '' // Sovellus tyhjentää kyseisen input:in arvon, sen jälkeen kun yllä oleva muuttuja on saanut arvon.\n    props.createNewValue(getContent) // Suoritetaan kyseinen funktio (dispatch(...)) props muuttujan sekä \"mapDispatchToProps(...)\" muuttujan avulla.\n    props.showNotificationMessage(`You have added ${getContent} to the database. Thank you for adding!`, 10) // Suoritetaan kyseinen funktio (dispatch(...)) props muuttujan sekä \"mapDispatchToProps(...)\" muuttujan avulla.\n  }\n\n  // Komponentti renderöi käyttäjälle näkyviin (...) sisällä olevat asiat.\n  return (\n    <div>\n      <form onSubmit={addValue}>\n        <input id='inputValue' name='newText' />\n        <button id='inputButton' type='submit'>Add new text</button>\n      </form>\n    </div>\n  )\n}\n\n// Alustetaan muuttuja \"mapStateToProps\", joka suorittaa {...} sisällä olevat asiat.\n// Muuttuja palauttaa meille takaisin datan, mikä sijaitsee storessa \"filter\"\n// objektin alla. Funktio käyttää myös parametrinä \"state\" muuttujan arvoa.\n// Lisää infoa funktiosta => https://react-redux.js.org/using-react-redux/connect-mapstate#defining-mapstatetoprops\nconst mapStateToProps = (state) => {\n  return {\n    values: state.values,\n    message: state.message\n  }\n}\n\n// Alustetaan muuttuja \"mapDispatchToProps\", joka suorittaa {...} sisällä olevat asiat.\n// Muuttujan avulla komponentti voi suorittaa \"createNewValue(...)\" actionin eli\n// dispatchaa ja siirtyy suorittamaan sen sisältöä => \"anecdoteReducer.js\" tiedostossa.\n// Tämän lisäksi komponentti voi dispatchaa => \"showNotificationMessage(...)\" muuttujan\n// ja suorittaa sen sisällön => \"Notification.js\" tiedostossa. Nyt molemmat muuttujat\n// voidaan suorittaa => \"props.funktio(parametri)\" kautta, kun aikaisemmissa\n// tehtävissä molemmat muuttujat suoritettiin => \"dispatch(funktio(parametri))\".\nconst mapDispatchToProps = {\n  createNewValue,\n  showNotificationMessage,\n}\n\n// Alustetaan muuttuja \"ConnectedAnecdoteForm\", jonka avulla kyseinen komponentti\n// eli \"AnecdoteForm\" yhdistetään storen datan kanssa => \"mapStateToProps()\"\n// muuttujan avulla. Tämä tarkoittaa sitä, että muuttuja \"props.values/message\"\n// on yhtä kuin => \"state.values/message\". Jos tätä alla olevaa muuttujaa ei olisi,\n// niin sovellus ei pystyisi renderöimään storessa olevaa dataa takaisin näkyviin.\nconst ConnectedAnecdoteForm = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(AnecdoteForm)\n\n// Viedään (export) alla oleva komponentti (ConnectedAnecdoteForm) sovelluksen käytettäväksi, jotta esim. \"App.js\" tiedosto pystyy suorittamaan kyseiset funktiot.\nexport default ConnectedAnecdoteForm\n","// This exercise has been commented by Aarni Pavlidi, if you have any questions or suggestions with the code,\n// then please contact me by sending email at me@aarnipavlidi.fi <3\n\nimport React from 'react' // Komponentti ottaa \"react\" nimisen kirjaston käyttöönsä.\nimport { useSelector, useDispatch } from 'react-redux' // Komponentti ottaa \"useSelector\" ja \"useDispatch\" funktiot käyttöönsä => \"react-redux\" kirjaston kautta.\nimport { likeValueButton } from '../reducers/anecdoteReducer' // Komponentti ottaa \"likeValueButton\" funktion käyttöönsä, joka sijaitsee => \"anecdoteReducer.js\" tiedostossa.\n\nimport { showNotificationMessage } from '../reducers/notificationReducer' // Komponentti ottaa \"showNotificationMessage\" funktion käyttöönsä, joka sijaitsee => \"anecdoteReducer.js\" tiedostossa.\n\nconst AnecdoteList = () => { // Alustetaan \"AnecdoteList\" niminen komponentti, joka suorittaa {...} sisällä olevat asiat.\n  // Alustetaan muuttuja \"anecdotes\", joka suorittaa \"useSelector(...)\" funkion. Tämän avulla päästään\n  // käsiksi \"storeen\" tallennettuun taulukon arvoihin. Lisää tästä täältä: https://react-redux.js.org/api/hooks#useselector\n  // Ota myös huomioon, että käytämme alla olevan funktion sisällä => \"state.values\",\n  // koska olemme asettaneet aikaisemmin storeen (store.js) kyseisen objektin arvon.\n  const anecdotes = useSelector(state => state.values)\n  // Alustetaan muuttuja \"dispatch\", joka suorittaa \"useDispatch()\" funktion. Tämän avulla sovellus\n  // pystyy tekemään muutoksia \"storeen\" tallennettuihin  taulukon arvoihin. Lisää tästä täältä: https://react-redux.js.org/api/hooks#usedispatch\n  const dispatch = useDispatch()\n\n  // Alustetaan muuttuja \"voteButton\", joka suorittaa {...} sisällä olevat asiat aina kun kyseiseen\n  // funktioon tehdään viittaus. Funktio saa myös käyttöönsä parametrin => \"getCurrentValue\" arvon,\n  // jonka sisältä löytyy klikatun \"content\", \"votes\" sekä \"id\" objektien arvot. Funktion tarkoituksena\n  // on toimia niin, että aina kun käyttäjä äänestää tiettyä tekstiä, niin funktio suorittaa kaksi (2)\n  // => \"dispatch(...)\" funktiota. Funktiolla \"showNotificationMessage(...)\" löytyy myös kaksi (2)\n  // erilaista parametrin arvoa, jotka se saa käyttöönsä sovelluksen käytettäväksi.\n  const voteButton = (getCurrentValue) => {\n    dispatch(likeValueButton(getCurrentValue)) // Sovellus suorittaa funktion \"likeValueButton(...)\", joka saa parametrin \"getCurrentValue\" muuttujan arvon.\n    dispatch(showNotificationMessage(`You have voted for ${getCurrentValue.content}. Thank you for voting!`, 10)) // Sovellus suorittaa funktion \"showNotificationVoted(...)\", joka saa parametrin \"getCurrentValue.content\" muuttujan arvon.\n  }\n\n  // Tehtävää: \"6.5*: anekdootit, step3\" varten, olemme muokanneet koodia hieman, niin että\n  // sovellus renderöi arvot äänten (\"votes\" objektin) mukaisessa suuruusjärjestyksessä.\n  // Funtion \"sort(...)\" sisältä löytyy paremetrit => \"a\" sekä \"b\", missä \"a\" tarkoittaa\n  // ensimmäistä elementtiä vertailua varten ja \"b\" toista elementtiä vertailua varten.\n  // Kun \"vertailu\" on luotu, niin luodaan sen pohjalta uusi taulukko \"map(...)\" funktion\n  // avulla, joka renderöi käyttäjälle näkyviin sen hetkiset arvot suuruusjärjestyksessä.\n\n  const getFilterValueFromStore = useSelector(state => state.filter) // Alustetaan muuttuja \"getFilterValueFromStore\", joka on yhtä kuin \"storessa\" sijaitsevan => \"filter\" objektin arvo.\n\n  // Tehtävää: \"6.12* paremmat anekdootit, step10\" varten, olemme muokanneet koodia hieman,\n  // niin että sovellus renderöi lukemat sen mukaan, mitä input:in arvoksi käyttäjä laittaa.\n  // Olemme alustaneet sitä varten muuttujan \"getFilterValueFromStore\", joka on oletuksena\n  // arvoa '' eli sovellus renderöi kaikki nykyiset arvot näkyviin käyttäjälle. Jos käyttäjä\n  // kirjoittaa jotain input:iin, niin sen hetkinen arvo näkyy storessa => \"filter\" objektissa.\n  // Haluamme filtteröidä arvot \"content\" objektin mukaan ja varmistamme, että kyseisen objektin\n  // arvot muutetaan pieniksi kirjaimiksi \"toLowerCase()\" funktion avulla sekä teemme tämän myös\n  // input:in arvon suhteen. Me teemme tämän sen takia, koska emme voi olettaa haluaako käyttäjä\n  // kirjoittaa inputtiin joko pienillä tai isoilla kirjaimilla! :)\n\n  // Komponentti renderöi käyttäjälle näkyviin (...) sisällä olevat asiat.\n  return (\n    <div>\n      {anecdotes.filter(filterValue => filterValue.content.toLowerCase().includes(getFilterValueFromStore.toLowerCase())).sort((a, b) => b.votes - a.votes).map(results =>\n        <div key={results.id}>\n          <div>\n            <h2>{results.content}</h2>\n          </div>\n          <div>\n            <p>Content has been voted for total of {results.votes} times <button onClick={() => voteButton(results)}>vote</button></p>\n          </div>\n        </div>\n      )}\n    </div>\n  )\n}\n\n// Viedään (export) alla oleva komponentti (AnecdoteList) sovelluksen käytettäväksi, jotta esim. \"App.js\" tiedosto pystyy suorittamaan kyseiset funktiot.\nexport default AnecdoteList\n","// This exercise has been commented by Aarni Pavlidi, if you have any questions or suggestions with the code,\n// then please contact me by sending email at me@aarnipavlidi.fi <3\n\nimport React from 'react' // Komponentti ottaa \"react\" nimisen kirjaston käyttöönsä.\nimport { connect } from 'react-redux' // Komponentti ottaa \"connect\" funktion käyttöönsä => \"react-redux\" kirjaston kautta.\n\nconst Notification = (props) => { // Alustetaan \"Notification\" niminen komponentti, joka suorittaa {...} sisällä olevat asiat.\n\n  const style = { // Alustetaan muuttuja \"style\", joka saa käyttöönsä {...} sisällä olevien objektien arvot.\n    border: 'solid',\n    padding: 10,\n    borderWidth: 1\n  }\n\n  const notificationToShow = () => { // Alustetaan muuttuja \"notificationToShow(...)\", joka suorittaa {...} sisällä olevat asiat.\n    // Jos alla oleva if-ehto toteutuu, eli \"props.message\" muuttuja on\n    // yhtä kuin => \"null\", niin renderöidään takaisin arvo => \"null\".\n    if (props.message === null) {\n      return null\n    }\n\n    // Jos alla oleva if-ehto toteutuu, eli \"props.message\" muuttuja on\n    // epätosi kuin => \"null\", niin renderöidään takaisin (...) sisällä\n    // olevat asiat. Elementti <h3> saa sen hetkisen \"props.message\" arvon.\n    if (props.message !== null ) {\n      return (\n        <div style={style}>\n          <h3>{props.message}</h3>\n        </div>\n      )\n    }\n  }\n\n  // Komponentti renderöi (...) sisällä olevan funktion takaisin käyttäjälle.\n  return (\n    <div>\n      {notificationToShow()}\n    </div>\n  )\n}\n\n// Alustetaan muuttuja \"mapStateToProps\", joka suorittaa {...} sisällä olevat asiat.\n// Muuttuja palauttaa meille takaisin datan, mikä sijaitsee storessa \"message\"\n// objektin alla. Funktio käyttää myös parametrinä \"state\" muuttujan arvoa.\n// Lisää infoa funktiosta => https://react-redux.js.org/using-react-redux/connect-mapstate#defining-mapstatetoprops\nconst mapStateToProps = (state) => {\n  return {\n    message: state.message\n  }\n}\n\n// Alustetaan muuttuja \"ConnectedNotification\", jonka avulla kyseinen komponentti\n// eli \"Notification\" yhdistetään storen datan kanssa => \"mapStateToProps()\"\n// muuttujan avulla. Tämä tarkoittaa sitä, että muuttuja \"props.message\"\n// on yhtä kuin => \"state.message\". Jos tätä alla olevaa muuttujaa ei olisi,\n// niin sovellus ei pystyisi renderöimään storessa olevaa dataa takaisin näkyviin.\nconst ConnectedNotification = connect(mapStateToProps)(Notification)\n\n// Viedään (export) alla oleva komponentti (ConnectedNotification) sovelluksen käytettäväksi, jotta esim. \"App.js\" tiedosto pystyy suorittamaan kyseiset funktiot.\nexport default ConnectedNotification\n","// This exercise has been commented by Aarni Pavlidi, if you have any questions or suggestions with the code,\n// then please contact me by sending email at me@aarnipavlidi.fi <3\n\n// Alustetaan muuttuja \"filterReducer\", joka suorittaa {...} sisällä olevat asiat. Muuttuja saa myös käyttöönsä parametrien => \"state\" ja \"action\" arvot.\nconst filterReducer = (state = '', action) => {\n\n  // Jos alla oleva if-ehto toteutuu, niin sovellus suorittaa {...} sisällä olevat asiat,\n  // eli aina kun käyttäjä kirjoittaa jotain filterin input:in arvoon, niin alla oleva\n  // ehto toteutuu, joten funktio palauttaa takaisin => \"action.filterValue\". Tämä\n  // tarkoittaa sitä, että \"action.fiterValue\" on yhtä kuin \"filter\" objekti (store).\n  if (action.type === 'FILTER_INPUT_VALUE') {\n    return action.filterValue\n  }\n\n  return state\n}\n\n// Viedään muuttujan \"changeFilterValue\" sisältö käytettäväksi, jotta esim. \"index.js\"\n// tiedosto pystyy hyödyntämään sovelluksen aikana. Aina kun kyseiseen funktioon\n// tehdään viittaus, niin sovellus tekee {...} sisällä olevat asiat. Funktio saa\n// myös käyttöönsä parametrin \"getCurrentFilterValue\" value eli aina kun käyttäjä\n// kirjoittaa jotain filtterin input:in arvoon, niin sen hetkinen arvo tallentuu\n// tämän parametrin alle, jonka jälkeen se tallentuu storessa sijaitsevaan\n// (\"store.js\" tiedostossa) => \"filter\" objektin alle.\nexport const changeFilterValue = (getCurrentFilterValue) => {\n  return {\n    type: 'FILTER_INPUT_VALUE',\n    filterValue: getCurrentFilterValue\n  }\n}\n\n// Viedään muuttujan \"reducer\" avulla tämän tiedoston sisältö käytettäväksi, jotta esim. \"index.js\" tiedosto pystyy hyödyntämään sovelluksen aikana.\nexport default filterReducer\n","// This exercise has been commented by Aarni Pavlidi, if you have any questions or suggestions with the code,\n// then please contact me by sending email at me@aarnipavlidi.fi <3\n\nimport React from 'react' // Komponentti ottaa \"react\" nimisen kirjaston käyttöönsä.\nimport { connect } from 'react-redux' // Komponentti ottaa \"connect\" funktion käyttöönsä => \"react-redux\" kirjaston kautta.\n\nimport { changeFilterValue } from '../reducers/filterReducer' // Komponentti ottaa \"changeFilterValue\" funktion käyttöönsä, joka sijaitsee => \"filterReducer.js\" tiedostossa.\n\nconst Filter = (props) => { // Alustetaan \"Filter\" niminen komponentti, joka suorittaa {...} sisällä olevat asiat.\n\n  const style = { // Alustetaan muuttuja \"style\", joka saa käyttöönsä {...} sisällä olevien objektien arvot.\n    marginBottom: 10\n  }\n\n  // Komponentti renderöi käyttäjälle näkyviin (...) sisällä olevat asiat. Aina kun\n  // käyttäjä kirjoittaa jotain input:in arvoon, niin sovellus suorittaa funktion =>\n  // \"changeFilterValue(...)\" props sekä \"mapStateToProps(...)\" muuttujan avulla.\n  return (\n    <div style={style}>\n      <div>Filter: <input onChange={ (event) => props.changeFilterValue(event.target.value)} /></div>\n    </div>\n  )\n}\n\n// Alustetaan muuttuja \"mapStateToProps\", joka suorittaa {...} sisällä olevat asiat.\n// Muuttuja palauttaa meille takaisin datan, mikä sijaitsee storessa \"filter\"\n// objektin alla. Funktio käyttää myös parametrinä \"state\" muuttujan arvoa.\n// Lisää infoa funktiosta => https://react-redux.js.org/using-react-redux/connect-mapstate#defining-mapstatetoprops\nconst mapStateToProps = (state) => {\n  return {\n    filter: state.filter\n  }\n}\n\n// Alustetaan muuttuja \"mapDispatchToProps\", joka suorittaa {...} sisällä olevat asiat.\n// Muuttujan avulla komponentti voi suorittaa \"changeFilterValue(...)\" actionin eli\n// dispatchaa ja siirtyy suorittamaan sen sisältöä => \"filterReducer.js\" tiedostossa.\n// Nyt meillä on pelkästään => \"props.changeFilterValue(...)\" ja aikaisemmissa\n// tehtävissä kyseinen funktio oli muotoa => \"dispatch(changeFilterValue(...))\".\nconst mapDispatchToProps = {\n  changeFilterValue,\n}\n\n// Alustetaan muuttuja \"ConnectedFilter\", jonka avulla kyseinen komponentti\n// eli \"Filter\" yhdistetään storen datan kanssa => \"mapStateToProps()\"\n// muuttujan avulla. Tämä tarkoittaa sitä, että muuttuja \"props.filter\"\n// on yhtä kuin => \"state.filter\". Jos tätä alla olevaa muuttujaa ei olisi,\n// niin sovellus ei pystyisi renderöimään storessa olevaa dataa takaisin näkyviin.\nconst ConnectedFilter = connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Filter)\n\n// Viedään (export) alla oleva komponentti (ConnectedFilter) sovelluksen käytettäväksi, jotta esim. \"App.js\" tiedosto pystyy suorittamaan kyseiset funktiot.\nexport default ConnectedFilter\n","// This exercise has been commented by Aarni Pavlidi, if you have any questions or suggestions with the code,\n// then please contact me by sending email at me@aarnipavlidi.fi <3\n\nimport React, { useEffect } from 'react' // Sovellus ottaa \"react\" nimisen kirjaston käyttöönsä.\n\nimport { showValuesFromDatabase } from './reducers/anecdoteReducer' // Komponentti ottaa \"showValuesFromDatabase\" funktion käyttöönsä, joka sijaitsee => \"anecdoteReducer.js\" tiedostossa.\nimport { useDispatch } from 'react-redux' // Komponentti ottaa \"useDispatch\" funktion käyttöönsä => \"react-redux\" kirjaston kautta.\n\nimport AnecdoteForm from './components/AnecdoteForm' // Sovellus hyödyntää \"AnecdoteForm\" (AnecdoteForm.js) nimistä komponenttia, joka sijaitsee => \"./components/AnecdoteForm\".\nimport AnecdoteList from './components/AnecdoteList' // Sovellus hyödyntää \"AnecdoteList\" (AnecdoteList.js) nimistä komponenttia, joka sijaitsee => \"./components/AnecdoteList\".\nimport Notification from './components/Notification' // Sovellus hyödyntää \"Notification\" (Notification.js) nimistä komponenttia, joka sijaitsee => \"./components/Notification\".\nimport Filter from './components/Filter' // Sovellus hyödyntää \"Filter\" (Filter.js) nimistä komponenttia, joka sijaitsee => \"./components/Filter\".\n\nconst App = () => { // Sovellus alkaa tästä...\n  // Alustetaan muuttuja \"dispatch\", joka suorittaa \"useDispatch()\" funktion. Tämän avulla sovellus\n  // pystyy tekemään muutoksia \"storeen\" tallennettuihin  taulukon arvoihin. Lisää tästä täältä: https://react-redux.js.org/api/hooks#usedispatch\n  const dispatch = useDispatch()\n\n  useEffect(() => { // Sovellus hyödyntää \"useEffect(...)\" funktiota ja suorittaa kyseisen funktion vain kerran eli haetaan halutut arvot erikseen tietokannasta.\n    // Kun käyttäjä saapuu sovellukseen, niin sovellus suorittaa => \"dispatch(...)\" funktion,\n    // joka sijaitsee => \"anecdoteReducer.js\" tiedostossa. Kyseinen funktio aiheuttaa sovelluksen\n    // aikana \"ketjureaktion\" eli sen jälkeen suoritetaan => \"getValuesFromDatabase(...)\" funktio,\n    // joka sijaitsee => \"services/anecdotes.js\" tiedostossa. Funktio palauttaa takaisin pyyntöön\n    // \"response.data\" muuttujan avulla, jonka avulla renderöidään tietokannan arvot käyttäjälle.\n    dispatch(showValuesFromDatabase())\n  }, [])\n\n  // Sovellus renderöi (...) sisällä olevat asiat käyttäjälle näkyviin.\n  return (\n    <div>\n      <Notification />\n      <h1>Anecdotes</h1>\n      <Filter />\n      <AnecdoteList />\n      <AnecdoteForm />\n    </div>\n  )\n} // Sovellus loppuu tähän...\n\n// Viedään (export) alla oleva komponentti (App) sovelluksen käytettäväksi, jotta esim. \"index.js\" tiedosto pystyy suorittamaan kyseiset funktiot.\nexport default App\n","// This exercise has been commented by Aarni Pavlidi, if you have any questions or suggestions with the code,\n// then please contact me by sending email at me@aarnipavlidi.fi <3\n\nimport { createStore, combineReducers, applyMiddleware } from 'redux' // Sovellus ottaa \"createStore\", \"combineReducers\" ja \"applyMiddleware\" funktiot käyttöönsä => \"redux\" kirjaston kautta.\nimport thunk from 'redux-thunk' // Alustetaan muuttuja \"thunk\", joka hyödyntää \"redux-thunk\" kirjaston sisältöä sovelluksen aikana.\nimport { composeWithDevTools } from 'redux-devtools-extension' // Sovellus ottaa \"composeWithDevTools\" funktion käyttöönsä => \"redux-devtools-extension\" kirjaston kautta.\n\nimport anecdoteReducer from './reducers/anecdoteReducer' // Alustetaan muuttuja \"anecdoteReducer\", joka hyödyntää \"anecdoteReducer.js\" tiedoston sisältöä sovelluksen aikana.\nimport notificationReducer from './reducers/notificationReducer' // Alustetaan muuttuja \"notificationReducer\", joka hyödyntää \"notificationReducer.js\" tiedoston sisältöä sovelluksen aikana.\nimport filterReducer from './reducers/filterReducer' // Alustetaan muuttuja \"filterReducer\", joka hyödyntää \"filterReducer.js\" tiedoston sisältöä sovelluksen aikana.\n\n// Alustetaan muuttuja \"reducer\", joka hyödyntää \"combineReducers(...)\" funktiota,\n// kyseisen funktion avulla voidaan yhdistää kolme (3) nykyistä reduceria eli tässä\n// tapauksessa yhdistämme \"anecdoteReducer\", \"notificationReducer\" sekä \"filterReducer\"\n// arvot yhteen. Kun sovellus renderöidään, niin konsoliin (redux-devtools) ilmestyy\n// myös kolme (3) objektia eli => \"values\", \"message\" ja \"filter\".\nconst reducer = combineReducers({\n  values: anecdoteReducer,\n  message: notificationReducer,\n  filter: filterReducer\n})\n\n// Alustetaan muuttuja \"store\", joka hyödyntää => \"createStore()\" funktiota. Funktio käyttää\n// parametrinä \"reducer\" muuttujan arvoa, lisää funktiosta löytyy täältä: https://redux.js.org/api/createstore\n// Muuttuja ottaa myös käyttöönsä \"composeWithDevTools()\" funktion, jonka avulla voidaan\n// seurata sovelluksen \"store\" tilaa ja sen muuttavia actioneja Chromen konsolin kautta.\n// Olemme muokanneet koodia tehtävää => \"6.15 anekdootit ja backend, step3\" varten ja lisänneet\n// funktion => \"applyMiddleware(...)\", jonka sisältä löytyy parametrin \"thunk\" arvo. Funktion\n// tarkoituksena on toimia niin, että sovellus pystyy luomaan asynkronisia action creatoreja.\n// Ensin siis odotetaan x asian valmistumista (await), jonka jälkeen suoritetaan \"dispatch()\" funktio.\nconst store = createStore(\n  reducer,\n  composeWithDevTools(\n    applyMiddleware(thunk)\n  )\n)\n\n// Viedään (export) alla oleva muuttuja (store) sovelluksen käytettäväksi, jotta esim. \"App.js\" tiedosto pystyy suorittamaan kyseiset funktiot.\nexport default store\n","// This exercise has been commented by Aarni Pavlidi, if you have any questions or suggestions with the code,\n// then please contact me by sending email at me@aarnipavlidi.fi <3\n\nimport React from 'react' // Sovellus ottaa \"react\" nimisen kirjaston käyttöönsä.\nimport ReactDOM from 'react-dom' // Sovellus ottaa \"react-dom\" nimisen kirjaston käyttöönsä.\n\nimport { Provider } from 'react-redux' // Sovellus ottaa \"Provider\" komponentin käyttöönsä => \"react-redux\" kirjaston kautta.\nimport App from './App' // Sovellus ottaa \"App.js\" tiedoston sisällön käyttöönsä.\n\nimport store from './store' // Alustetaan muuttuja \"store\", joka ottaa \"store.js\" tiedoston sisällön käyttöönsä.\n\n// Sovellus renderöi käyttäjälle alla olevat komponentit näkyviin, joiden sisältö\n// siirtyvät => \"index.html\" tiedostoon => elementin sisälle, jonka id:n arvo on \"root\".\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}